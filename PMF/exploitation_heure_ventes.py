# -*- coding:cp1252 -*-
"""
Created on Wed Jan 07 14:58:08 2015

@author: User

on retourne le nombre de vente par CIP par tranche horaire
on met complétement de côté ici la pharmacie de vente
"""


import os
import pandas as pd
import numpy as np
import pdb

import matplotlib.pyplot as plt

path = "C:\\medicaments\\PMF\\200905_15"

dates = [100*year + month + 1
         for year in range(2009, 2014)
         for month in range(12)]

##dataset = ['temp_cip', 'pharm_temp', 'pharma_temp_cip', 'pharma_cip']
#dataset = 'pharma_temp_cip'
#path = os.path.join(path, dataset)
os.chdir(path)
#
#for k, date in enumerate(dates):
#    print (k, date)
#    name_file = "TBL-CTPM 140820 Données tickets " + str(date) + "_JLR.csv"
#    if dataset == '':
#        temp = pd.read_csv(pharma_temp_cip + , header=None)
#    else:
#        pdb.se

def parser(x):
    return pd.datetime.strptime(x, "%Y-%m-%d %H:%M:%S.000" )


echelle_temp = 15

for date in dates:
    print date
    name_file = "TBL-CTPM 140820 Données tickets " + str(date) + "_JLR.csv"
    path_file = os.path.join(path, name_file)
    temp = pd.read_csv(path_file, sep=';', engine='c', header=None,
                       usecols=[1,2,4,5,6], names=['pharma', 'date', 'CIP', 'prix', 'qte'],
                       decimal=',', #parse_dates=['date'], date_parser=parser
                       )
    # ecriture des tailles
    temp['prix'] = (100*temp['prix']).astype(np.int32)
    temp['qte'] = temp['qte'].astype(np.int16)
    temp['pharma'] = temp['pharma'].astype(np.int16)

#    temp['day'] = temp['date'].str[8:10].astype(np.int8)
#    temp['hour'] = temp['date'].str[11:13].astype(np.int8)
#    temp['minute'] = temp['date'].str[14:16].astype(np.int8)
#
#    temp['quarter'] = temp['minute'] // echelle_temp
    date_time = pd.to_datetime(temp['date'])
    temp['begin'] = np.datetime64('2009-01-01')
    temp['period'] = (date_time - temp.begin).astype('timedelta64[m]') // echelle_temp
#    temp['weekday'] = date.dt.weekday

    agg = temp.groupby(['CIP', 'period'])['qte'].sum().reset_index()
#    agg['year'] = date // 100
#    agg['month'] = date % 100
    name_csv = str(date) + '_' + str(echelle_temp) + '.csv'
    path_csv = os.path.join(path, name_csv)
    agg.to_csv(path_csv)



total = pd.DataFrame()
for date in dates:
    name_csv = str(date) + '_' + str(echelle_temp) + '.csv'
    path_csv = os.path.join(path, name_csv)
    temp = pd.read_csv(path_csv)
    total = total.append(temp)

### CIP
#total['CIP'].nunique() # => 3061
#list_cip = total['CIP'].unique()
#list_cip = list_cip.astype(str)
#with open('list_cip.txt', 'w') as f:
#    f.write(','.join(list_cip))

# TODO: merge medic_gouv et bdm

#table.to_csv('total_tous_cip.csv')
table = pd.read_csv('total_tous_cip.csv')
table = table.iloc[:, 1:]

# reduit le pas temporel
heure = 24*4*7*2
table['period'] = heure*(table['period'] // heure)
table = table.groupby('period')['qte'].sum().reset_index()

begin = pd.Series(np.datetime64('2009-01-01'), index=table.index)
table['period'] = echelle_temp*table['period'].astype('timedelta64[m]') + begin

test = table.set_index('period')
test.plot()

plt.show()
## weekday 
table['weekday'] = table['period'].dt.weekday
table['hour'] = table['period'].dt.hour
table['minute'] = table['period'].dt.minute

weekday = table.groupby('weekday')['qte'].sum()
by_hour = table.groupby(['weekday', 'hour'])['qte'].sum()
by_minute = table.groupby(['weekday', 'hour', 'minute'])['qte'].sum()

