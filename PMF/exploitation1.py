# -*- coding: utf-8 -*-
"""
Created on Mon Jan 05 18:11:22 2015

@author: User
"""

# Chargement de la base
all_tab = pd.read_csv((path + "prix_qte.csv").decode('utf-8').encode('cp1252'))
all_tab.reset_index(inplace=True)
all_tab.fillna(0, inplace=True)

moyenne = pd.Series(index=range(60))
for k in range(60):
    moyenne.loc[k] =  \
        (all_tab[str(k)]*all_tab['prix']).sum() / all_tab[str(k)].sum()
moyenne.plot()



# Travail par cip7 qui permet d'aller chercher des infos de gouv
def __prix_moyen(group, k):
    ''' fonction de calcul du prix moyen'''
    if (group[str(k)]*group['prix']).sum() / group[str(k)].sum() == np.inf:
        pdb.set_trace
    if group[str(k)].sum() == 0:
        return 0
    return (group[str(k)]*group['prix']).sum() / group[str(k)].sum()


def _prix_moyen(group):
    ''' fonction plus générique que son nom le laisse penser qui
    retourne pour chaque groupe un valeur pour tous les mois
    '''
    data = pd.Series(index=range(60))
    for k in range(60):
        data.loc[k] = __prix_moyen(group, k)
    return data
# TODO: faire en numpy plutôt que de créer une Serie à chaque fois
prix_moyen = all_tab.groupby('cip7').apply(_prix_moyen)
prix_moyen = prix_moyen.fillna(0)
prix_moyen.reset_index(inplace=True)

# récupéreation des infos de .gouv dessus
from medic_gouv import load_medic_gouv
maj_bdm = 'maj_20140630\\'
infos = load_medic_gouv(maj_bdm, ['Date_AMM', 'CIP7', 'Label_presta',
                                  'Taux_rembours', 'Prix', 'Type'])

table = prix_moyen.merge(infos, left_on='cip7', right_on='CIP7')
# TODO: comprendre pourquoi le match est très partiel (cf ci-dessous)
test = prix_moyen.merge(infos, left_on='cip7', right_on='CIP7', how='left')
test = test[test['CIP7'].isnull()]
test[[58,59,'cip7']]
# Médicament retiré du marché
# Médicament qui n'appartient pas à la liste des spécialité
# référence de l'AFSSAPS : parapharmcie, homéopathie ?
table['Taux_rembours'].value_counts()

vendus_sur_la_periode = table[(table[0] > 0) & (table[59] > 0)]
qte = all_tab.groupby('cip7').apply(_prix_moyen)
vendus_sur_la_periode.mean()
for year in range(4):
    prix_n_moins_1 = vendus_sur_la_periode[12*year].mean()
    if year == 4:
        prix_n = vendus_sur_la_periode[59].mean()
    else:
        prix_n = vendus_sur_la_periode[12*(year+1)].mean()
    evol = 100*(prix_n - prix_n_moins_1)/prix_n_moins_1
    print("l'indice prix des médicaments a été de : " + str(evol) +
            " entre " + str(2009+year) + " et " + str(2009+year+1))